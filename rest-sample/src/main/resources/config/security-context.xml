<?xml version="1.0" encoding="UTF-8"?>

<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
					http://www.springframework.org/schema/beans
					http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
					http://www.springframework.org/schema/security
					http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<!-- Spring Security Configuration -->
	<!--=======================================================================================================================-->

	<!-- HTTP security handling -->

	<!-- make sure login page and few others are not secured -->
	<security:http pattern="/images/**" security="none"/>
	<security:http pattern="/css/**" security="none"/>
	<security:http pattern="/js/**" security="none"/>
	<security:http pattern="/login.jsp" security="none"/>
	<security:http pattern="/denied.jsp" security="none"/>

	<security:http>

		<!-- supporting form-based authentication for interactive connections (u/i) -->
		<security:form-login
			login-page="/login.jsp"
			default-target-url="/index.jsp"
			always-use-default-target='true'
			authentication-failure-url="/login.jsp?login_error=true"
		/>
		<security:logout
			logout-url="/j_spring_security_logout"
			invalidate-session="true"
			logout-success-url="/login.jsp?loggedout=true"
		/>

		<!-- Defines a pattern which is matched against the URL's of incoming requests -->
		<security:intercept-url pattern="/**" access="ROLE_USER" requires-channel="any"/>

		<!-- Enables basic authentication instead of form login. Gives precedence to the first -->
		<security:http-basic />

	</security:http>


	<!-- Authentication strategy: use custom implementation of the Spring's UserDetailsService -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="userSecurityService">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>


	<!-- Custom password encoder (salted) -->
	<bean id="passwordEncoder" class="com.app.security.PasswordEncoder" />


	<!--
		Enables simple role-based constraints with Spring's native annotations (currently not used)
		Example: @PreAuthorize("hasAuthority('ROLE_TELLER')")
		Note: annotated methods will only be secured for instances which are defined as Spring beans.
	-->
	<security:global-method-security pre-post-annotations="enabled" />

</beans>
