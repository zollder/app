<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://java.sun.com/xml/ns/javaee"
		 xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		 xsi:schemaLocation="
		 		http://java.sun.com/xml/ns/javaee
		 		http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		 id="WebApp_ID"
		 version="2.5">

	<display-name>REST Sample</display-name>

	<!-- Context Location and Context Listener Configuration-->
	<!--=======================================================================================================================-->
	<!--
		Main configuration file for this Spring web application.
		Keep all configuration files in the app/resources/* to take advantage of "classpath:" notation 
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:config/rest-services-config.xml
			classpath:config/security-context.xml
		</param-value>
	</context-param>

	<!-- Loads the Spring web application context using the configuration file defined above. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- Spring Security Configuration (hook into the Spring Security web infrastructure) -->
	<!--=======================================================================================================================-->

	<!--
		Spring servlet filter: delegates filtering to implementation of javax.servlet.filter
		which is registered as a bean in the rest-services-config
	-->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!--
		Defines FilterChainProxy: filter that chains together one or more additional filters.
		Spring automatically creates filter beans in security-context when <http> element is added
	-->
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- Servlet Configuration-->
	<!--=======================================================================================================================-->
	<!--
		Define the Spring Dispatcher Servlet for the REST services.
		The 'contextConfiguration' param with an empty value means that the
		Spring Context won't try to load a default file called restservices-servlet.xml
	 -->
	<servlet>
		<servlet-name>rest</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- This Servlet mapping means that this Servlet will handle all incoming requests -->
	<servlet-mapping>
		<servlet-name>rest</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>